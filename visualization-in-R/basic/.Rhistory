airquality = read.csv('airquality.csv',header=TRUE, sep=",")
arr = c(1,2,3,4)
c
arr
hist(arr)
a = c(1,2,3)
b = c(2,3,4)
df = data.frame(a,b)
df
df[1,1]
df[1,2]
df[1,3]
df[3,1]
df$height
df$a
class(df$a)
str(df)
'bool_arr0 = c(TRUE, FALSE)
bool_arr1 = c(TRUE, false)
class(bool_arr0)
class(bool_arr1)
bool_arr0 = c(TRUE, FALSE)
bool_arr1 = c(TRUE, false)
class(bool_arr0)
class(bool_arr1)
bool_arr0 = c(TRUE, FALSE)
bool_arr1 = c(TRUE, false)
hi
exists()
''
'
bool_arr0 = c(TRUE, FALSE)
bool_arr1 = c(TRUE, false)
bool_arr0 = c(TRUE, FALSE)
bool_arr1 = c(TRUE, "false")
class(bool_arr0)
class(bool_arr1)
bool_arr1 = as.logical(toupper(bool_arr1))
class(bool_arr1)
airquality = read.csv('airquality.csv',header=TRUE, sep=",")
str(airquality)
my_print <- function(a) {
print(a)
}
my_print('salam')
explain_data <- function(data){
print(str(data))
}
explain_data(airquality)
explain_data <- function(data){
print(str(data))
print(head(data))
print(tail(data))
print(summary(data))
}
explain_data(airquality)
plot(airquality$Ozone)
plot(airquality$Ozone, airquality$Wind)
plot(airquality$Ozone)
plot(airquality$Ozone, airquality$Wind)
plot(airquality)
#types: p: points, l: lines,b: both
plot(airquality$Ozone, type= "b")
#types: p: points, l: lines,b: both
plot(airquality$Ozone, type= "l")
#types: p: points, l: lines,b: both
plot(airquality$Ozone, type= "p")
#types: p: points, l: lines,b: both
plot(airquality$Ozone, type= "b")
#types: p: points, l: lines,b: both
plot(airquality$Ozone, type= "h")
?plot()
#labels and titles
plot(airquality$Ozone, xlab = 'ozone Concentration', ylab = 'No of Instances', main = 'Ozone levels in NY city', col = 'green')
# Horizontal bar plot
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col= 'green',horiz = TRUE)
# Vertical bar plot
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col='red',horiz = FALSE)
#types: p: points, l: lines,b: both, h: high density vertical lines
#read more ?plot()
plot(airquality$Ozone, type= "h")
# Vertical bar plot
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col='red',horiz = FALSE)
# Horizontal bar plot
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col= 'green',horiz = TRUE)
# Vertical bar plot
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col='red',horiz = FALSE)
hist(airquality$Solar.R)
hist(airquality$Solar.R, main = 'Solar Radiation values in air',xlab = 'Solar rad.', col='red')
#Single box plot
boxplot(airquality$Solar.R)
# Multiple box plots
boxplot(airquality[,0:4], main='Multiple Box plots')
airquality[,0:4]
str(airquality[,0:4])
# Multiple box plots
boxplot(airquality[,0:3], main='Multiple Box plots')
grid_chart <- function(){
par(mfrow=c(3,3), mar=c(2,5,2,1), las=1, bty="n")
plot(airquality$Ozone)
plot(airquality$Ozone, airquality$Wind)
plot(airquality$Ozone, type= "c")
plot(airquality$Ozone, type= "s")
plot(airquality$Ozone, type= "h")
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col='green',horiz = TRUE)
hist(airquality$Solar.R)
boxplot(airquality$Solar.R)
boxplot(airquality[,0:4], main='Multiple Box plots')
}
grid_chart()
grid_chart <- function(){
par(mfrow=c(3,3), mar=c(2,5,2,1), las=0, bty="n")
plot(airquality$Ozone)
plot(airquality$Ozone, airquality$Wind)
plot(airquality$Ozone, type= "c")
plot(airquality$Ozone, type= "s")
plot(airquality$Ozone, type= "h")
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col='green',horiz = TRUE)
hist(airquality$Solar.R)
boxplot(airquality$Solar.R)
boxplot(airquality[,0:4], main='Multiple Box plots')
}
grid_chart()
grid_chart <- function(){
par(mfrow=c(3,3), mar=c(2,5,2,1), las=0, bty="n")
plot(airquality$Ozone)
plot(airquality$Ozone, airquality$Wind)
plot(airquality$Ozone, type= "c")
plot(airquality$Ozone, type= "s")
plot(airquality$Ozone, type= "h")
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col='green',horiz = TRUE)
hist(airquality$Solar.R)
boxplot(airquality$Solar.R)
boxplot(airquality[,0:4], main='Multiple Box plots')
}
grid_chart()
# margin of the grid(mar), no of rows and columns(mfrow)
# whether a border is to be included(bty)
# and position of the labels(las: 1 for horizontal, las: 0 for vertical)
grid_chart <- function(){
par(mfrow=c(3,3), mar=c(2,5,2,1), las=1, bty="n")
plot(airquality$Ozone)
plot(airquality$Ozone, airquality$Wind)
plot(airquality$Ozone, type= "c")
plot(airquality$Ozone, type= "s")
plot(airquality$Ozone, type= "h")
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col='green',horiz = TRUE)
hist(airquality$Solar.R)
boxplot(airquality$Solar.R)
boxplot(airquality[,0:4], main='Multiple Box plots')
}
grid_chart()
# margin of the grid(mar), no of rows and columns(mfrow)
# whether a border is to be included(bty)
# and position of the labels(las: 1 for horizontal, las: 0 for vertical)
grid_chart <- function(las=1){
par(mfrow=c(3,3), mar=c(2,5,2,1), las=las, bty="n")
plot(airquality$Ozone)
plot(airquality$Ozone, airquality$Wind)
plot(airquality$Ozone, type= "c")
plot(airquality$Ozone, type= "s")
plot(airquality$Ozone, type= "h")
barplot(airquality$Ozone, main = 'Ozone Concenteration in air',xlab = 'ozone levels', col='green',horiz = TRUE)
hist(airquality$Solar.R)
boxplot(airquality$Solar.R)
boxplot(airquality[,0:4], main='Multiple Box plots')
}
grid_chart(0)
grid_chart(1)
grid_chart(0)
grid_chart(1)
example("par")
library(ggplot2)
ggplot(diamonds)  # if only the dataset is known.
ggplot(diamonds, aes(x=carat))  # if only X-axis is known. The Y-axis can be specified in respective geoms.
ggplot(diamonds, aes(x=carat, y=price))  # if both X and Y axes are fixed for all layers.
ggplot(diamonds, aes(x=carat, color=cut))  # Each category of the 'cut' variable will now have a distinct  color, once a geom is added.
library(ggplot2)
install.packages(
"ggplot2",
repos = c("http://rstudio.org/_packages",
"http://cran.rstudio.com")
)
library(ggplot2)
install.packages("tidyverse")
library(ggplot2)
R --version
version
version
install.packages("ggplot2")
# Libraries
library(ggplot2)
library(dplyr)
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv", header=T)
data$date <- as.Date(data$date)
# Plot
data %>%
tail(10) %>%
ggplot( aes(x=date, y=value)) +
geom_line() +
geom_point()
install.packages("tidyverse")
library(dplyr)
# Libraries
library(ggplot2)
library(dplyr)
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv", header=T)
data$date <- as.Date(data$date)
# Plot
data %>%
tail(10) %>%
ggplot( aes(x=date, y=value)) +
geom_line() +
geom_point()
# Load dataset from github
data <- read.csv('../../../results/tables/sample-log.csv')
View(data)
# Plot
data %>%
tail(10) %>%
ggplot( aes(x=date, y=value)) +
geom_line() +
geom_point()
View(df)
View(data)
# Plot
data %>%
tail(10) %>%
ggplot( aes(x=epoch, y=val_precision)) +
geom_line() +
geom_point()
library(ggplot2)
ggplot(diamonds)  # if only the dataset is known.
ggplot(diamonds, aes(x=carat))  # if only X-axis is known. The Y-axis can be specified in respective geoms.
library(ggplot2)
ggplot(diamonds)  # if only the dataset is known.
ggplot(diamonds, aes(x=carat))  # if only X-axis is known. The Y-axis can be specified in respective geoms.
ggplot(diamonds, aes(x=carat, y=price))  # if both X and Y axes are fixed for all layers.
ggplot(diamonds, aes(x=carat, color=cut))  # Each category of the 'cut' variable will now have a distinct  color, once a geom is added.
View(diamonds)
ggplot(diamonds)  # if only the dataset is known.
str(diamonds)
ggplot(diamonds, aes(x=carat, color=cut))  # Each category of the 'cut' variable will now have a distinct  color, once a geom is added.
ggplot(diamonds)  # if only the dataset is known.
ggplot(data)  # if only the dataset is known.
ggplot(diamonds, aes(x=carat), color="steelblue")
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + geom_smooth()
ggplot(diamonds) + geom_point(aes(x=carat, y=price, color=cut)) + geom_smooth(aes(x=carat, y=price, color=cut)) # Same as above but specifying the aesthetics inside the geoms.
cut
price
ggplot(diamonds) + geom_point(aes(x=carat, y=price, color=cut)) + geom_smooth(aes(x=carat, y=price)) # Remove color from geom_smooth
ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=cut)) + geom_smooth()  # same but simpler
ggplot(diamonds, aes(x=carat, y=price, color=cut, shape=color)) + geom_point()
ggplot( aes(x=epoch, y=val_precision)) +
geom_line() +
geom_point()
ggplot(data, aes(x=epoch, y=val_precision)) +
geom_line() +
geom_point()
ggplot(data, aes(x=epoch)) +
geom_line() +
geom_point()
ggplot(data) +
geom_line() +
geom_point()
ggplot(data,aes(x=epoch, y=val_precision), aes(x=epoch, y=val_recall)) +
geom_line() +
geom_point()
# Approach 1:
data(economics, package="ggplot2")  # init data
economics <- data.frame(economics)  # convert to dataframe
ggplot(economics) + geom_line(aes(x=date, y=pce, color="pcs")) + geom_line(aes(x=date, y=unemploy, col="unemploy")) + scale_color_discrete(name="Legend") + labs(title="Economics") # plot multiple time series using 'geom_line's
# Load dataset from github
data <- read.csv('../../../results/tables/sample-log.csv')
View(data)
View(data)
ggplot(data) +
geom_line(aes(x=epoch, y=val_recall)) +
geom_line(aes(x=epoch, y=val_precision)) +
geom_point()
ggplot(data) +
geom_line(aes(x=epoch, y=val_recall)) +
geom_line(aes(x=epoch, y=val_precision))
